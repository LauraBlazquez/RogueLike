//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControlls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControlls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""27000c86-1b2b-4692-b25c-d6f5ed2e43fb"",
            ""actions"": [
                {
                    ""name"": ""SelectWeapon1"",
                    ""type"": ""Button"",
                    ""id"": ""3defc350-a1b0-43fa-affc-21dd8a9ea6ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectWeapon2"",
                    ""type"": ""Button"",
                    ""id"": ""c13faa53-4d00-43ad-9fdf-aaa6c4805dfc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectWeapon3"",
                    ""type"": ""Button"",
                    ""id"": ""e4487a3a-352d-4a18-b754-aa5f0e567d49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectWeapon4"",
                    ""type"": ""Button"",
                    ""id"": ""71033165-ffb8-4c21-b3ae-b328f0e3864b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""5601888f-f179-4d41-b108-ae730dec63f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""11168cee-18b0-4c93-a34c-f1e08a1a96a3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""34a80cfc-9f36-4d6a-8487-e042bf1d86ae"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectWeapon1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f56ec4af-9754-4009-94b5-43e6972b95cb"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectWeapon2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b0f2f1b-bcf1-4581-ac71-a5fea60ea014"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectWeapon3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58134b16-99c5-47ff-83d5-a76c61f47601"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectWeapon4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dfce9efe-9045-47e7-b1b5-7f4e6f6e3243"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1294c023-8097-4729-af03-c2597caf7ea5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4157da0d-3c37-4bd0-a0dd-0598de89c632"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""db375ac4-00f9-45a4-a91e-a531d4ae8974"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5e8167a9-9fcf-4ec3-90e0-280c7e043afd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""720e8404-017d-42d7-9133-592b123f7a47"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_SelectWeapon1 = m_Gameplay.FindAction("SelectWeapon1", throwIfNotFound: true);
        m_Gameplay_SelectWeapon2 = m_Gameplay.FindAction("SelectWeapon2", throwIfNotFound: true);
        m_Gameplay_SelectWeapon3 = m_Gameplay.FindAction("SelectWeapon3", throwIfNotFound: true);
        m_Gameplay_SelectWeapon4 = m_Gameplay.FindAction("SelectWeapon4", throwIfNotFound: true);
        m_Gameplay_Attack = m_Gameplay.FindAction("Attack", throwIfNotFound: true);
        m_Gameplay_Movement = m_Gameplay.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_SelectWeapon1;
    private readonly InputAction m_Gameplay_SelectWeapon2;
    private readonly InputAction m_Gameplay_SelectWeapon3;
    private readonly InputAction m_Gameplay_SelectWeapon4;
    private readonly InputAction m_Gameplay_Attack;
    private readonly InputAction m_Gameplay_Movement;
    public struct GameplayActions
    {
        private @PlayerControlls m_Wrapper;
        public GameplayActions(@PlayerControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectWeapon1 => m_Wrapper.m_Gameplay_SelectWeapon1;
        public InputAction @SelectWeapon2 => m_Wrapper.m_Gameplay_SelectWeapon2;
        public InputAction @SelectWeapon3 => m_Wrapper.m_Gameplay_SelectWeapon3;
        public InputAction @SelectWeapon4 => m_Wrapper.m_Gameplay_SelectWeapon4;
        public InputAction @Attack => m_Wrapper.m_Gameplay_Attack;
        public InputAction @Movement => m_Wrapper.m_Gameplay_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @SelectWeapon1.started += instance.OnSelectWeapon1;
            @SelectWeapon1.performed += instance.OnSelectWeapon1;
            @SelectWeapon1.canceled += instance.OnSelectWeapon1;
            @SelectWeapon2.started += instance.OnSelectWeapon2;
            @SelectWeapon2.performed += instance.OnSelectWeapon2;
            @SelectWeapon2.canceled += instance.OnSelectWeapon2;
            @SelectWeapon3.started += instance.OnSelectWeapon3;
            @SelectWeapon3.performed += instance.OnSelectWeapon3;
            @SelectWeapon3.canceled += instance.OnSelectWeapon3;
            @SelectWeapon4.started += instance.OnSelectWeapon4;
            @SelectWeapon4.performed += instance.OnSelectWeapon4;
            @SelectWeapon4.canceled += instance.OnSelectWeapon4;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @SelectWeapon1.started -= instance.OnSelectWeapon1;
            @SelectWeapon1.performed -= instance.OnSelectWeapon1;
            @SelectWeapon1.canceled -= instance.OnSelectWeapon1;
            @SelectWeapon2.started -= instance.OnSelectWeapon2;
            @SelectWeapon2.performed -= instance.OnSelectWeapon2;
            @SelectWeapon2.canceled -= instance.OnSelectWeapon2;
            @SelectWeapon3.started -= instance.OnSelectWeapon3;
            @SelectWeapon3.performed -= instance.OnSelectWeapon3;
            @SelectWeapon3.canceled -= instance.OnSelectWeapon3;
            @SelectWeapon4.started -= instance.OnSelectWeapon4;
            @SelectWeapon4.performed -= instance.OnSelectWeapon4;
            @SelectWeapon4.canceled -= instance.OnSelectWeapon4;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnSelectWeapon1(InputAction.CallbackContext context);
        void OnSelectWeapon2(InputAction.CallbackContext context);
        void OnSelectWeapon3(InputAction.CallbackContext context);
        void OnSelectWeapon4(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
}
